"""
s2p.py

Deal with s2p files from Keysight.
"""
from pathlib import Path

import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
from scipy import signal
from scipy.signal import butter, filtfilt

def normalise(df: pd.DataFrame, freq: float, columns: list) -> pd.DataFrame:
    """
    Normalise the S-parameters with respect to the reference frequency.
    """
    columns = columns if columns else df.columns
    
    for column in columns:
        if "freq" in column:
            continue

        idx = np.argmin(np.absolute(df["freq"] - freq))
        ref = df[column].iloc[idx]
        df[column] = df[column] - ref

    return df

def averaging(df: pd.DataFrame, columns: list, idx: float, model: str="savgol") -> pd.DataFrame:
    """
    Averaging the S-parameters with respect to the frequency.
    """
    columns = columns if columns else df.columns
    df2 = df.copy()
    for column in columns:
        if "freq" in column:
            continue

        values = df.iloc[idx:][column]

        if model == "savgol":
            df2[f"{column}_smooth"] = np.concatenate((df[column].values[:idx], signal.savgol_filter(values, 50, 13, mode="nearest")))
        elif model == "mean":
            df2[f"{column}_smooth"] = np.concatenate((df[column].values[:idx], values.rolling(window=200, min_periods=1).mean()))
            # df2[column] = df[column].rolling(window=200, min_periods=1).mean()
        else:
            raise ValueError("Invalid model")
    return df2


def butter_lowpass_filter(data: pd.DataFrame, columns: list, cutoff_freq: float, fs: float, order: float) -> pd.DataFrame:
    """
    Butterworth low-pass filter.

    Parameters:
        data (pd.DataFrame): The data to be filtered.
        columns (list): The columns to be filtered.
        cutoff_freq (float): The cutoff frequency.
        fs (float): The sampling frequency.
        order (int): The order of the filter.

    Returns:
        pd.DataFrame: The filtered data.
    """
    nyquist = 0.5 * fs
    normal_cutoff = cutoff_freq / nyquist

    for column in columns:
        b, a = butter(order, normal_cutoff, btype='low')
        data[column] = filtfilt(b, a, data[column])
    return data


class LCAs2p:
    """
    Load and parse the S2P file generated by LCA.

    Parameters:
        filename (str): The filename of the S2P file.
    """
    def __init__(self, filename):
        with open(filename, "r", encoding="utf-8") as file:
            self.raw_data = file.readlines()
        self.port = self.n_ports(filename)

    @staticmethod
    def n_ports(filename):
        ext = Path(filename).suffix
        return int(ext[2])
    
    def parse(self, fmt: str="dB"):
        """
        Parse the S2P file.

        Parameters:
            fmt (str): The format of the S-parameters. Either "dB" or "RI".
        """
        # find the line where the data starts

        data = [line.split() for line in self.raw_data if line[0].isnumeric()]
        df = pd.DataFrame(data, dtype=float)
        
        df["freq"] = df[0]
        if fmt.upper() == "RI": # real and imaginary
            sparams = [f"s{j}{i}" for i in range(1, self.port + 1) for j in range(1, self.port + 1)]
            for i, sparam in zip(range(1, len(sparams)*2, 2), sparams):
                df[sparam] = df[[i, i+1]].apply(lambda n: n.iloc[0]+1j*n.iloc[1], axis=1)

        else: # magnitude angle, dB angle
            sparams = []
            for i in range(1, self.port + 1):
                for j in range(1, self.port + 1):
                    sparams.extend([f's{j}{i}', f's{j}{i} angle'])
            for i, sparam in enumerate(sparams, start=1):
                df[sparam] = df[i]

        df.drop(columns=[i for i in df.columns if isinstance(i, int)], inplace=True)

        return df
    

def find_normalise_freq(freq: np.array, ydata: np.array) -> float:
    """
    Find the normalisation frequency.

    Parameters:
        freq (np.ndarray): The frequency data.
        ydata (np.ndarray): The y-axis data.
    """
    fc = 5e+09
    idx_min = np.argmin(np.absolute(freq - 1e+09))
    idx_max = np.argmin(np.absolute(freq - fc))
    return freq[np.argmin(ydata[idx_min:idx_max]) + idx_min]

def main():
    folder = r"C:\Users\cchan\Downloads\27_02_2024\27_02_2024"
    ext = "s2p"
    db = 3
    volt = 3
    side = "right"
    gap = 210

    filenames = (f"Radius4_t5_4v",)

    # filenames = (f"{volt}V-{db}dB-{side}-g210", f"{volt}V-{db}dB-{side}-g220", f"{volt}V-{db}dB-{side}-g230")
    # filenames = (f"{volt}V-{db}dB-left-g{gap}", f"{volt}V-{db+3}dB-left-g{gap}", f"{volt}V-{db}dB-right-g{gap}", f"{volt}V-{db+3}dB-right-g{gap}")
    # filenames = (f"1V-{db}dB-13dBm", f"2V-{db}dB-13dBm", f"3V-{db}dB-13dBm")
    # filenames = (f"{volt}V-{db}dB-10dBm", f"{volt}V-{db}dB-13dBm", f"{volt}V-{db}dB-10dBm-dep", f"{volt}V-{db}dB-13dBm-dep")
    # filenames = (f"{volt}V-{db}dB-10dBm", f"{volt}V-{db}dB-13dBm", f"{volt}V-{db+3}dB-10dBm", f"{volt}V-{db+3}dB-13dBm")

    # filenames = (f"{volt}V-{db}dB-10dBm-dep",)
    fig, axes = plt.subplots(1,3, figsize=(15, 5))
    columns = ("s21",)

    for filename in filenames:
        file = f"{folder}/{filename}.{ext}"
        data = LCAs2p(file).parse(fmt="dB")

        freq = data["freq"]*1e-09
        idx = np.argmin(np.absolute(freq - 1))
        axes[0].plot(freq, data["s21"], label=filename)
        data = normalise(data, find_normalise_freq(data["freq"], data["s21"]), ["s21"])
        
        data2 = averaging(data, ["s21"], idx, model="mean")
        axes[1].plot(freq, data["s21"], label=filename)
        for column in columns:
            axes[2].plot(freq, data2[f"{column}_smooth"], "--", label=f"{filename}")
            i = np.argmin(np.absolute(data2[f"{column}_smooth"] + 3)[np.argmin(np.absolute(freq - 1)):np.argmin(np.absolute(freq - 60))])
            print(f"{filename}: {freq[i]}")


    for idx, ax in enumerate(axes):
        ax.set_xlabel("Frequency (GHz)")
        ax.set_ylabel("S21 (dB)")
        ax.legend()

        if idx > 0:
            ax.set_xlim(1, 65)
            ax.axhline(y=-3, linestyle='--', color="r")
        else:
            pass
            # ax.set_xscale("log")

        
        
    fig.tight_layout()
    fig.savefig(fname=f"pam4_{volt}V_g{gap}", dpi=400)
    # fig.savefig(fname=f"pam4_{side}_{volt}V_{db}dB", dpi=400)
    # fig.savefig(fname=f"sring_1_2_3V_{db}dB", dpi=400)
    # fig.savefig(fname=f"sring_{volt}V_{db}dB", dpi=400)
    # fig.savefig(fname=f"sring_{volt}V_{db}_{db+3}dB", dpi=400)
    plt.show()
    


if __name__ == "__main__":
    main()